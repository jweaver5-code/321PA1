// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Student fields
  studentProfile    StudentProfile?
  bookingsAsStudent Booking[]       @relation("StudentBookings")
  reviewsWritten    Review[]        @relation("StudentReviews")

  // Tutor fields
  tutorProfile    TutorProfile?
  bookingsAsTutor Booking[]     @relation("TutorBookings")
  reviewsReceived Review[]      @relation("TutorReviews")

  // Messages
  messagesSent     Message[] @relation("SenderMessages")
  messagesReceived Message[] @relation("ReceiverMessages")

  @@map("users")
}

model StudentProfile {
  id         String  @id @default(cuid())
  userId     String  @unique
  university String?
  major      String?
  year       String?
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model TutorProfile {
  id           String   @id @default(cuid())
  userId       String   @unique
  university   String
  major        String
  year         String
  gpa          Float?
  hourlyRate   Int
  bio          String
  subjects     String[] // Array of subject names
  isVerified   Boolean  @default(false)
  rating       Float    @default(0)
  totalReviews Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("tutor_profiles")
}

model Subject {
  id          String   @id @default(cuid())
  name        String   @unique
  category    String
  description String?
  createdAt   DateTime @default(now())

  @@map("subjects")
}

model Booking {
  id          String        @id @default(cuid())
  studentId   String
  tutorId     String
  subject     String
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  totalAmount Int // Amount in cents
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  student User @relation("StudentBookings", fields: [studentId], references: [id])
  tutor   User @relation("TutorBookings", fields: [tutorId], references: [id])

  payment Payment?
  review  Review?

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Payment {
  id              String        @id @default(cuid())
  bookingId       String        @unique
  amount          Int // Amount in cents
  stripePaymentId String?
  status          PaymentStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  booking Booking @relation(fields: [bookingId], references: [id])

  @@map("payments")
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Review {
  id        String   @id @default(cuid())
  bookingId String   @unique
  studentId String
  tutorId   String
  rating    Int // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())

  booking Booking @relation(fields: [bookingId], references: [id])
  student User    @relation("StudentReviews", fields: [studentId], references: [id])
  tutor   User    @relation("TutorReviews", fields: [tutorId], references: [id])

  @@map("reviews")
}

model Message {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  sender   User @relation("SenderMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceiverMessages", fields: [receiverId], references: [id])

  @@map("messages")
}
